// +----------------------------------------------------------------------
// | ZYSOFT [ MAKE IT OPEN ]
// +----------------------------------------------------------------------
// | Copyright (c) 2016 ZYSOFT All rights reserved.
// +----------------------------------------------------------------------
// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )
// +----------------------------------------------------------------------
// | Author: zy_cwind <391321232@qq.com>
// +----------------------------------------------------------------------
Zyngin = function(canvas) {
    var exports = {};
    
    var total;
    var count;
    var cache = {};
    var audioCache = {};
    
    exports.dataLoader = {
        "loadData": function(info) {
            total = info.length;
            count = 0;
            
            var i = 0;
            for (; i < info.length; i++)
                if (info[i].type == "audio") {
                    audioCache[info[i].name] = {"data": new Audio(info[i].url)};
                    count++;
                    exports.dataLoader.callback(count / total);
                } else {
                    var data = new Image();
                    data.src = info[i].url;
                    var eventType = ["onabort", "onerror", "onload"];
                    var j = 0;
                    for (; j < 3; j++)
                        data[eventType[j]] = (function(data, info, eventId) {
                            return function() {
                                if (eventId == 2) {
                                    cache[info.name] = data;
                                    count++;
                                    exports.dataLoader.callback(count / total);
                                } else if (eventId == 1) {
                                    data.src = "";
                                    data.src = info.url;
                                }
                            };
                        })(data, info[i], j);
                }
        },
        "callback" : function(percent) {
        }
    };
    
    /**
     * 精灵
     *
     *
     */
    exports.Sprite = function(imageData) {
        this.x = 0;
        this.y = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.anchorX = 0;
        this.anchorY = 0;
        this.rotation = 0;
        this.visible = true;
        this.imageData = imageData;
    };
    
    exports.Sprite.prototype.draw = function(context) {
        if (this.visible)
            if (cache[this.imageData.name]) {
                var x = this.imageData.x ? this.imageData.x : 0;
                var y = this.imageData.y ? this.imageData.y : 0;
                context.drawImage(cache[this.imageData.name], x, y, this.w, this.h, 0, 0, this.w, this.h);
            }
    };
    
    exports.Sprite.prototype.eventHandler = function(e) {
        if (this.visible)
            switch (e.eventId) {
            case 0:
            case 1:
            case 2:
                return this.onTouch(e);
            }
    };
    
    exports.Sprite.prototype.onTouch = function(e) {
    };
    
    exports.Sprite.prototype.onFocusout = function() {
    };
    
    /**
     * 根据 dock 和 parent 重新计算自身位置
     *
     *
     */
    exports.Sprite.prototype.bind = function() {
        if (this.parent) {
            /**
             * 自适应宽高
             * 
             * 
             */
            if (this.autow) this.w = this.parent.w / this.scaleX;
            if (this.autoh) this.h = this.parent.h / this.scaleY;
            
            switch(this.dock) {
            case 1: case 4: case 7: this.x = 0; break;
            case 2: case 5: case 8: this.x = (this.parent.w - this.w * this.scaleX) / 2; break;
            case 3: case 6: case 9: this.x = (this.parent.w - this.w * this.scaleX); break;
            }
            switch(this.dock) {
            case 1: case 2: case 3: this.y = 0; break;
            case 4: case 5: case 6: this.y = (this.parent.h - this.h * this.scaleY) / 2; break;
            case 7: case 8: case 9: this.y = (this.parent.h - this.h * this.scaleY); break;
            }
        }
    };
    
    exports.Text = function() {
        exports.Sprite.call(this);
        this.h = 1;
        
        this.fixed = true;
        this.data = "";
        this.fontSize = 20;
        this.font = "'Arial'";
        this.fillStyle = "#000000";
    };
    
    exports.Text.prototype = new exports.Sprite();
    
    exports.Text.prototype.draw = function(context) {
        if (this.visible) {
            context.save();
            context.font = this.fontSize + "px " + this.font;
            context.textAlign = "left";
            context.textBaseline = "top";
            context.fillStyle = this.fillStyle;
            /**
             * 效率低,应采用二分法
             *
             *
             */
            var w = 0;
            var h = 0;
            var i = 0;
            for (; i < this.data.length;) {
                var measured = context.measureText(this.data[i]).width;
                if (w + measured <= this.w) {
                    if (this.fixed || h + this.fontSize <= this.h) {
                        context.fillText(this.data[i], w, h);
                        i++;
                    }
                    else
                        break;
                    w += measured;
                } else if (measured < this.w) {
                    w = 0;
                    h += this.fontSize;
                } else
                    break;
            }
            if (this.fixed)
                this.h = h + this.fontSize;
            context.restore();
        }
    };
    
    exports.Layer = function() {
        exports.Sprite.call(this);
        this.children = [];
        this.bufferCanvas = document.createElement("canvas");
    };
    
    exports.Layer.prototype = new exports.Sprite();
    
    exports.Layer.prototype.draw = function(context) {
        if (this.visible) {
            this.bufferCanvas.width = this.w; this.bufferCanvas.height = this.h;
            
            var buffer = this.bufferCanvas.getContext("2d"); buffer.clearRect(0, 0, this.w, this.h);
            var i = 0;
            for (; i < this.children.length; i++) {
                buffer.save();
                this.children[i].bind();
                /**
                 * 移动到锚点并进行旋转
                 *
                 *
                 */
                var m = this.children[i].anchorX * this.children[i].scaleX;
                var n = this.children[i].anchorY * this.children[i].scaleY;
                buffer.translate(this.children[i].x + m, this.children[i].y + n);
                buffer.rotate(this.children[i].rotation);
                buffer.translate(-m, -n);
                buffer.scale(this.children[i].scaleX, this.children[i].scaleY);
                
                this.children[i].draw(buffer);
                buffer.restore();
            }
            /**
             * 屏蔽了低效的绘图方法
             * 使用两个 canvas 是为了裁切不可见的区域
             *
             *
             */
            context.drawImage(this.bufferCanvas, 0, 0);
        }
    };
    
    exports.Layer.prototype.eventHandler = function(e) {
        if (this.visible)
            switch (e.eventId) {
            case 0:
            case 1:
            case 2:
                var handled;
                var i = this.children.length - 1;
                for (; i >= 0; i--) {
                    var m = (e.x - this.children[i].x) / this.children[i].scaleX - this.children[i].anchorX;
                    var n = (e.y - this.children[i].y) / this.children[i].scaleY - this.children[i].anchorY;
                    var x = m * Math.cos(this.children[i].rotation) + n * Math.sin(this.children[i].rotation) + this.children[i].anchorX;
                    var y = n * Math.cos(this.children[i].rotation) - m * Math.sin(this.children[i].rotation) + this.children[i].anchorY;
                    /**
                     * 将坐标转换到内部坐标系，由锚点进行旋转
                     * 
                     */
                    if (!handled && x >= 0 && this.children[i].w >= x && y >= 0 && this.children[i].h >= y) {
                         handled = this.children[i].eventHandler({
                             "eventId": e.eventId,
                             "x": x,
                             "y": y
                         });
                    } else
                        this.children[i].onFocusout();
                }
                if (handled)
                    return handled;
                return this.onTouch(e);
                break;
            case 4:
                var i = this.children.length - 1;
                for (; i >= 0; i--)
                    this.children[i].eventHandler(e);
                break;
            }
    };
    
    exports.Layer.prototype.findChild = function(id) {
        if (this.id == id)
            return this;
        var i = 0;
        for (; i < this.children.length; i++)
            if (this.children[i].findChild) {
                var sprite = this.children[i].findChild(id);
                if (sprite)
                    return sprite;
            } else if (this.children[i].id == id)
                return this.children[i];
    };
    
    /**
     * 渲染场景
     * 
     * 
     */
    exports.Layer.inflate = function(defs) {
        var sprite;
        var ini = {"class": true};
        switch (defs["class"]) {
        case "Sprite":
            ini.imageData = true;
            sprite = new exports.Sprite(defs.imageData);
            break;
        case "Text":
            sprite = new exports.Text();
            break;
        case "Layer":
            sprite = new exports.Layer();
        case "ScrollLayer":
            if (!sprite) sprite = new exports.ScrollLayer();
        case "CachedLayer":
            if (!sprite) sprite = new exports.CachedLayer();
            if (defs.children) {
                ini.children = true;
                /**
                 * 渲染子节点
                 * 
                 * 
                 */
                var i = 0;
                for (; i < defs.children.length; i++) {
                    var childSprite = exports.Layer.inflate(defs.children[i]);
                    if (childSprite) {
                        childSprite.parent = sprite;
                        sprite.children.push(childSprite);
                    }
                }
            }
            break;
        }
        if (sprite) { 
            for (var p in defs)
                if (!ini[p])
                    sprite[p] = defs[p];
            return sprite;
        }
    };
    
    /**
     * children 只能有一个
     * 
     * 
     */
    exports.ScrollLayer = function() {
        exports.Layer.call(this);
    };
    
    exports.ScrollLayer.prototype = new exports.Layer();
    
    exports.ScrollLayer.prototype.onTouch = function(e) {
        var m = this.children[0].w * this.children[0].scaleX;
        var n = this.children[0].h * this.children[0].scaleY;
        if (m < this.w)
            m = this.w;
        if (n < this.h)
            n = this.h;
        
        if (this.w < m || this.h < n) {
            switch (e.eventId) {
            case 0:
                this.p = e;
                break;
            case 1:
                if (this.p) {
                    this.children[0].x += e.x - this.p.x;
                    this.children[0].y += e.y - this.p.y;
                    this.p = e;
                }
                break;
            case 2:
                this.p = false;
                break;
            }
            return true;
        }
    };
    
    exports.ScrollLayer.prototype.bind = function() {
        var m = this.children[0].w * this.children[0].scaleX;
        var n = this.children[0].h * this.children[0].scaleY;
        if (m < this.w)
            m = this.w;
        if (n < this.h)
            n = this.h;
        /**
         * 修正位置
         * 
         * 
         */
        if (this.children[0].x < this.w - m)
            this.children[0].x = this.w - m;
        if (this.children[0].x > 0)
            this.children[0].x = 0;
        if (this.children[0].y < this.h - n)
            this.children[0].y = this.h - n;
        if (this.children[0].y > 0)
            this.children[0].y = 0;
        
        /**
         * 锁定属性
         *
         *
         */
        this.children[0].rotation = 0;
        exports.Layer.prototype.bind.call(this);
    };
    
    exports.ScrollLayer.prototype.onFocusout = function() {
        this.p = false;
    };
    
    exports.CachedLayer = function() {
        exports.Layer.call(this);
        this.update = true;
    };
    
    exports.CachedLayer.prototype = new exports.Layer();
    
    exports.CachedLayer.prototype.eventHandler = function(e) {
        if (this.visible)
            switch (e.eventId) {
            case 4:
                this.update = true;
                break;
            }
        return exports.Layer.prototype.eventHandler.call(this, e);
    };
    
    exports.CachedLayer.prototype.draw = function(context) {
        if (this.visible)
            if (this.update) {
                this.update = false;
                exports.Layer.prototype.draw.call(this, context);
            } else
                context.drawImage(this.bufferCanvas, 0, 0);
    };
    
    exports.rootLayer = new exports.Layer();
    
    /**
     * 隐藏 rootLayer 父节点
     *
     *
     */
    var roots = new exports.Layer();
    {
        roots.draw = function(context) {
            context.clearRect(0, 0, this.w, this.h);
            exports.Layer.prototype.draw.call(this, context);
        };
        
        roots.bind = function() {
            if (this.w != canvas.width || this.h != canvas.height) {
                this.w  = canvas.width; this.h = canvas.height;
                events.push({
                    "eventId": 4
                });
            }
        };
        
        roots.children.push(exports.rootLayer);
    };
    
    /**
     * 定时器
     * 
     * 
     */
    exports.Timer = function(delay) {
        this.delay = delay;
    };
    
    exports.Timer.prototype.start = function() {
        this.e = {
            "eventId": 3,
            "run": true,
            "now" : new Date().valueOf(),
            "delay": this.delay,
            "callback": this.onTime,
            "t": this
        };
        events.push(this.e);
    };
    
    /**
     * 在下一个定时时间内移除
     * 
     * 
     */
    exports.Timer.prototype.stop = function() {
        this.e.run = false;
    };
    
    exports.Timer.prototype.onTime = function() {
    };
    
    /**
     * 声音支持
     * 
     * 
     */
    exports.Sound = function(name) {
        this.name = name;
    };
    
    exports.Sound.prototype.play = function() {
        var audio = audioCache[this.name];
        if (audio)
            if (audio.loaded) {
                audio.data.currentTime = 0;
                audio.data.play();
            } else
                audio.inplay = true;
    };
    
    /**
     * 在事件中加载声音
     *
     *
     */
    exports.Sound.prepare = function() {
        for (var name in audioCache)
            if (audioCache[name].loaded)
                continue;
            else {
                audioCache[name].data.load();
                audioCache[name].data.oncanplaythrough = (function(name) {
                    return function() {
                        var  audio = audioCache[name];
                        if (!audio.loaded) {
                             audio.loaded = true;
                            if (audio.inplay) {
                                audio.data.play();
                                audio.inplay = false;
                            }
                        }
                    };
                })(name);
            }
    };
    
    exports.fps = {"rate": 1};
    
    /**
     * 测试并调整速度
     *
     *
     */
    var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {window.setTimeout(callback, 1);};
    var now = new Date().valueOf();
    
    requestAnimationFrame(function calc() {
        var n = new Date().valueOf();
        exports.fps.rate = n - now;
        if (exports.fps.rate < 1)
            exports.fps.rate = 1;
        now = n;
        run();
        requestAnimationFrame(calc);
    });
    
    var events = [];
    /**
     * 消息循环
     *
     *
     */
    function run() {
        roots.bind();
        
        var i = 0;
        for (; i < events.length; i++) {
            switch (events[i].eventId) {
            case 0:
            case 1:
            case 2:
            case 4:
                roots.eventHandler(events[i]);
                break;
            case 3:
                var now = new Date().valueOf();
                if (events[i].now + events[i].delay <= now) {
                    if (events[i].run) {
                        events[i].now = now;
                        events[i].callback.call(events[i].t);
                        continue;
                    }
                } else
                    continue;
                break;
            }
            events.splice(i--, 1);
        }
        roots.draw(canvas.getContext("2d"));
    };
    
    var eventType = ["touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup"];
    
    function judge(e) {
        var j = 3;
        if (e.changedTouches)
            j = 0;
        canvas.removeEventListener(eventType[j], judge);
        var i = 0;
        for (; i < 3; i++) {
            var h = touchEvent(i);
            canvas.addEventListener(eventType[i + j], h);
            if (i == 0)
                h(e);
        }
    };
    
    /**
     * 多点将被转化为单点,缺陷在于无法判断手势
     * 
     * 
     */
    function touchEvent(eventId) {
        return function(e) {
            if (e && e.preventDefault)
                e.preventDefault();
            else
                window.event.returnValue = false;
            
            /**
             * 载入声音
             *
             *
             */
            if (eventId == 0)
                exports.Sound.prepare();
            
            var m = document.documentElement.scrollLeft || document.body.scrollLeft;
            var n = document.documentElement.scrollTop || document.body.scrollTop;
            var t = e.changedTouches || [e];
            var i = 0;
            for (; i < t.length; i++)
                events.push({
                    "eventId": eventId,
                    "x": (t[i].clientX - canvas.offsetLeft + m) / canvas.offsetWidth * canvas.width,
                    "y": (t[i].clientY - canvas.offsetTop + n) / canvas.offsetHeight * canvas.height
                });
        };
    };
    
    canvas.addEventListener(eventType[0], judge);
    canvas.addEventListener(eventType[3], judge);
    
    return exports;
};

/**
 * 通过 eval() 函数把内部的类导出
 * 
 * 
 */
Zyngin.define = function(canvasId) {
    return "var classes = Zyngin(document.getElementById(\"" + canvasId + "\"));" +
           "var defs = \"\";" +
           "for (var p in classes)" +
               "defs += \"var \" + p + \" = classes.\" + p + \";\";" +
           "eval(defs);";
};
